// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.SchoolAcademicDataOnDemand;
import com.school.base.domain.SchoolDataOnDemand;
import com.school.base.domain.Sms;
import com.school.base.domain.SmsDataOnDemand;
import com.school.base.domain.StaffDataOnDemand;
import com.school.base.domain.StudentDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SmsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SmsDataOnDemand: @Component;
    
    private Random SmsDataOnDemand.rnd = new SecureRandom();
    
    private List<Sms> SmsDataOnDemand.data;
    
    @Autowired
    StaffDataOnDemand SmsDataOnDemand.staffDataOnDemand;
    
    @Autowired
    SchoolAcademicDataOnDemand SmsDataOnDemand.schoolAcademicDataOnDemand;
    
    @Autowired
    SchoolDataOnDemand SmsDataOnDemand.schoolDataOnDemand;
    
    @Autowired
    StudentDataOnDemand SmsDataOnDemand.studentDataOnDemand;
    
    public Sms SmsDataOnDemand.getNewTransientSms(int index) {
        Sms obj = new Sms();
        setMessageId(obj, index);
        setRecipientMobileNo(obj, index);
        setSmsCost(obj, index);
        setSmsCount(obj, index);
        setSmsDeliveredDtTime(obj, index);
        setSmsDetail(obj, index);
        setSmsSentDtTime(obj, index);
        setSmsStatus(obj, index);
        return obj;
    }
    
    public void SmsDataOnDemand.setMessageId(Sms obj, int index) {
        String messageId = "messageId_" + index;
        if (messageId.length() > 200) {
            messageId = messageId.substring(0, 200);
        }
        obj.setMessageId(messageId);
    }
    
    public void SmsDataOnDemand.setRecipientMobileNo(Sms obj, int index) {
        String recipientMobileNo = "recipientMobileNo_" + index;
        if (recipientMobileNo.length() > 255) {
            recipientMobileNo = recipientMobileNo.substring(0, 255);
        }
        obj.setRecipientMobileNo(recipientMobileNo);
    }
    
    public void SmsDataOnDemand.setSmsCost(Sms obj, int index) {
        Float smsCost = new Integer(index).floatValue();
        if (smsCost > 9.99999999999E11F) {
            smsCost = 9.99999999999E11F;
        }
        obj.setSmsCost(smsCost);
    }
    
    public void SmsDataOnDemand.setSmsCount(Sms obj, int index) {
        Integer smsCount = new Integer(index);
        obj.setSmsCount(smsCount);
    }
    
    public void SmsDataOnDemand.setSmsDeliveredDtTime(Sms obj, int index) {
        Calendar smsDeliveredDtTime = Calendar.getInstance();
        obj.setSmsDeliveredDtTime(smsDeliveredDtTime);
    }
    
    public void SmsDataOnDemand.setSmsDetail(Sms obj, int index) {
        String smsDetail = "smsDetail_" + index;
        if (smsDetail.length() > 500) {
            smsDetail = smsDetail.substring(0, 500);
        }
        obj.setSmsDetail(smsDetail);
    }
    
    public void SmsDataOnDemand.setSmsSentDtTime(Sms obj, int index) {
        Calendar smsSentDtTime = Calendar.getInstance();
        obj.setSmsSentDtTime(smsSentDtTime);
    }
    
    public void SmsDataOnDemand.setSmsStatus(Sms obj, int index) {
        String smsStatus = "smsStatus_" + index;
        if (smsStatus.length() > 255) {
            smsStatus = smsStatus.substring(0, 255);
        }
        obj.setSmsStatus(smsStatus);
    }
    
    public Sms SmsDataOnDemand.getSpecificSms(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Sms obj = data.get(index);
        Long id = obj.getSmsId();
        return Sms.findSms(id);
    }
    
    public Sms SmsDataOnDemand.getRandomSms() {
        init();
        Sms obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getSmsId();
        return Sms.findSms(id);
    }
    
    public boolean SmsDataOnDemand.modifySms(Sms obj) {
        return false;
    }
    
    public void SmsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Sms.findSmsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Sms' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Sms>();
        for (int i = 0; i < 10; i++) {
            Sms obj = getNewTransientSms(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
