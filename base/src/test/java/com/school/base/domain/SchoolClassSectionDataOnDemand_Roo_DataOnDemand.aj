// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.SchoolClass;
import com.school.base.domain.SchoolClassDataOnDemand;
import com.school.base.domain.SchoolClassSection;
import com.school.base.domain.SchoolClassSectionDataOnDemand;
import com.school.base.domain.Section;
import com.school.base.domain.SectionDataOnDemand;
import com.school.base.domain.StaffDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SchoolClassSectionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SchoolClassSectionDataOnDemand: @Component;
    
    private Random SchoolClassSectionDataOnDemand.rnd = new SecureRandom();
    
    private List<SchoolClassSection> SchoolClassSectionDataOnDemand.data;
    
    @Autowired
    StaffDataOnDemand SchoolClassSectionDataOnDemand.staffDataOnDemand;
    
    @Autowired
    SchoolClassDataOnDemand SchoolClassSectionDataOnDemand.schoolClassDataOnDemand;
    
    @Autowired
    SectionDataOnDemand SchoolClassSectionDataOnDemand.sectionDataOnDemand;
    
    public SchoolClassSection SchoolClassSectionDataOnDemand.getNewTransientSchoolClassSection(int index) {
        SchoolClassSection obj = new SchoolClassSection();
        setSchoolClassId(obj, index);
        setSectionId(obj, index);
        return obj;
    }
    
    public void SchoolClassSectionDataOnDemand.setSchoolClassId(SchoolClassSection obj, int index) {
        SchoolClass schoolClassId = schoolClassDataOnDemand.getRandomSchoolClass();
        obj.setSchoolClassId(schoolClassId);
    }
    
    public void SchoolClassSectionDataOnDemand.setSectionId(SchoolClassSection obj, int index) {
        Section sectionId = sectionDataOnDemand.getRandomSection();
        obj.setSectionId(sectionId);
    }
    
    public SchoolClassSection SchoolClassSectionDataOnDemand.getSpecificSchoolClassSection(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SchoolClassSection obj = data.get(index);
        Integer id = obj.getSchoolClassSectionId();
        return SchoolClassSection.findSchoolClassSection(id);
    }
    
    public SchoolClassSection SchoolClassSectionDataOnDemand.getRandomSchoolClassSection() {
        init();
        SchoolClassSection obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getSchoolClassSectionId();
        return SchoolClassSection.findSchoolClassSection(id);
    }
    
    public boolean SchoolClassSectionDataOnDemand.modifySchoolClassSection(SchoolClassSection obj) {
        return false;
    }
    
    public void SchoolClassSectionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SchoolClassSection.findSchoolClassSectionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SchoolClassSection' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SchoolClassSection>();
        for (int i = 0; i < 10; i++) {
            SchoolClassSection obj = getNewTransientSchoolClassSection(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
