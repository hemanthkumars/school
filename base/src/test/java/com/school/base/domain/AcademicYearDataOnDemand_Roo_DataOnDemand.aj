// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.AcademicYear;
import com.school.base.domain.AcademicYearDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect AcademicYearDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AcademicYearDataOnDemand: @Component;
    
    private Random AcademicYearDataOnDemand.rnd = new SecureRandom();
    
    private List<AcademicYear> AcademicYearDataOnDemand.data;
    
    public AcademicYear AcademicYearDataOnDemand.getNewTransientAcademicYear(int index) {
        AcademicYear obj = new AcademicYear();
        setAcademicYear(obj, index);
        return obj;
    }
    
    public void AcademicYearDataOnDemand.setAcademicYear(AcademicYear obj, int index) {
        String academicYear = "academicYear_" + index;
        if (academicYear.length() > 100) {
            academicYear = academicYear.substring(0, 100);
        }
        obj.setAcademicYear(academicYear);
    }
    
    public AcademicYear AcademicYearDataOnDemand.getSpecificAcademicYear(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AcademicYear obj = data.get(index);
        Integer id = obj.getAcademicYearId();
        return AcademicYear.findAcademicYear(id);
    }
    
    public AcademicYear AcademicYearDataOnDemand.getRandomAcademicYear() {
        init();
        AcademicYear obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getAcademicYearId();
        return AcademicYear.findAcademicYear(id);
    }
    
    public boolean AcademicYearDataOnDemand.modifyAcademicYear(AcademicYear obj) {
        return false;
    }
    
    public void AcademicYearDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = AcademicYear.findAcademicYearEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AcademicYear' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AcademicYear>();
        for (int i = 0; i < 10; i++) {
            AcademicYear obj = getNewTransientAcademicYear(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
