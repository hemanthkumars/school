// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.SchoolAcademic;
import com.school.base.domain.SchoolAcademicDataOnDemand;
import com.school.base.domain.SchoolFee;
import com.school.base.domain.SchoolFeeDataOnDemand;
import com.school.base.domain.SchoolFeeType;
import com.school.base.domain.SchoolFeeTypeDataOnDemand;
import com.school.base.domain.StaffDataOnDemand;
import com.school.base.domain.Student;
import com.school.base.domain.StudentDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SchoolFeeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SchoolFeeDataOnDemand: @Component;
    
    private Random SchoolFeeDataOnDemand.rnd = new SecureRandom();
    
    private List<SchoolFee> SchoolFeeDataOnDemand.data;
    
    @Autowired
    StaffDataOnDemand SchoolFeeDataOnDemand.staffDataOnDemand;
    
    @Autowired
    SchoolAcademicDataOnDemand SchoolFeeDataOnDemand.schoolAcademicDataOnDemand;
    
    @Autowired
    SchoolFeeTypeDataOnDemand SchoolFeeDataOnDemand.schoolFeeTypeDataOnDemand;
    
    @Autowired
    StudentDataOnDemand SchoolFeeDataOnDemand.studentDataOnDemand;
    
    public SchoolFee SchoolFeeDataOnDemand.getNewTransientSchoolFee(int index) {
        SchoolFee obj = new SchoolFee();
        setAuditCreatedDtTime(obj, index);
        setBalance(obj, index);
        setPaidAmount(obj, index);
        setSchoolAcademicYearId(obj, index);
        setSchoolFeeTypeId(obj, index);
        setStudentId(obj, index);
        setTotalAmount(obj, index);
        return obj;
    }
    
    public void SchoolFeeDataOnDemand.setAuditCreatedDtTime(SchoolFee obj, int index) {
        Calendar auditCreatedDtTime = Calendar.getInstance();
        obj.setAuditCreatedDtTime(auditCreatedDtTime);
    }
    
    public void SchoolFeeDataOnDemand.setBalance(SchoolFee obj, int index) {
        Integer balance = new Integer(index);
        obj.setBalance(balance);
    }
    
    public void SchoolFeeDataOnDemand.setPaidAmount(SchoolFee obj, int index) {
        Integer paidAmount = new Integer(index);
        obj.setPaidAmount(paidAmount);
    }
    
    public void SchoolFeeDataOnDemand.setSchoolAcademicYearId(SchoolFee obj, int index) {
        SchoolAcademic schoolAcademicYearId = schoolAcademicDataOnDemand.getRandomSchoolAcademic();
        obj.setSchoolAcademicYearId(schoolAcademicYearId);
    }
    
    public void SchoolFeeDataOnDemand.setSchoolFeeTypeId(SchoolFee obj, int index) {
        SchoolFeeType schoolFeeTypeId = schoolFeeTypeDataOnDemand.getRandomSchoolFeeType();
        obj.setSchoolFeeTypeId(schoolFeeTypeId);
    }
    
    public void SchoolFeeDataOnDemand.setStudentId(SchoolFee obj, int index) {
        Student studentId = studentDataOnDemand.getRandomStudent();
        obj.setStudentId(studentId);
    }
    
    public void SchoolFeeDataOnDemand.setTotalAmount(SchoolFee obj, int index) {
        Integer totalAmount = new Integer(index);
        obj.setTotalAmount(totalAmount);
    }
    
    public SchoolFee SchoolFeeDataOnDemand.getSpecificSchoolFee(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SchoolFee obj = data.get(index);
        Long id = obj.getSchoolFeeId();
        return SchoolFee.findSchoolFee(id);
    }
    
    public SchoolFee SchoolFeeDataOnDemand.getRandomSchoolFee() {
        init();
        SchoolFee obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getSchoolFeeId();
        return SchoolFee.findSchoolFee(id);
    }
    
    public boolean SchoolFeeDataOnDemand.modifySchoolFee(SchoolFee obj) {
        return false;
    }
    
    public void SchoolFeeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SchoolFee.findSchoolFeeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SchoolFee' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SchoolFee>();
        for (int i = 0; i < 10; i++) {
            SchoolFee obj = getNewTransientSchoolFee(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
