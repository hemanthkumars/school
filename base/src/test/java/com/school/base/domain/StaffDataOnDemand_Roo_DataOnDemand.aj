// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.BloodGroupDataOnDemand;
import com.school.base.domain.CasteDataOnDemand;
import com.school.base.domain.CityDataOnDemand;
import com.school.base.domain.CountryDataOnDemand;
import com.school.base.domain.DepartmentDataOnDemand;
import com.school.base.domain.GenderDataOnDemand;
import com.school.base.domain.LanguageDataOnDemand;
import com.school.base.domain.PostionDataOnDemand;
import com.school.base.domain.ReligionDataOnDemand;
import com.school.base.domain.School;
import com.school.base.domain.SchoolDataOnDemand;
import com.school.base.domain.Staff;
import com.school.base.domain.StaffDataOnDemand;
import com.school.base.domain.StateDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect StaffDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StaffDataOnDemand: @Component;
    
    private Random StaffDataOnDemand.rnd = new SecureRandom();
    
    private List<Staff> StaffDataOnDemand.data;
    
    @Autowired
    BloodGroupDataOnDemand StaffDataOnDemand.bloodGroupDataOnDemand;
    
    @Autowired
    CasteDataOnDemand StaffDataOnDemand.casteDataOnDemand;
    
    @Autowired
    CityDataOnDemand StaffDataOnDemand.cityDataOnDemand;
    
    @Autowired
    CountryDataOnDemand StaffDataOnDemand.countryDataOnDemand;
    
    @Autowired
    DepartmentDataOnDemand StaffDataOnDemand.departmentDataOnDemand;
    
    @Autowired
    GenderDataOnDemand StaffDataOnDemand.genderDataOnDemand;
    
    @Autowired
    LanguageDataOnDemand StaffDataOnDemand.languageDataOnDemand;
    
    @Autowired
    PostionDataOnDemand StaffDataOnDemand.postionDataOnDemand;
    
    @Autowired
    ReligionDataOnDemand StaffDataOnDemand.religionDataOnDemand;
    
    @Autowired
    SchoolDataOnDemand StaffDataOnDemand.schoolDataOnDemand;
    
    @Autowired
    StateDataOnDemand StaffDataOnDemand.stateDataOnDemand;
    
    public Staff StaffDataOnDemand.getNewTransientStaff(int index) {
        Staff obj = new Staff();
        setAddress(obj, index);
        setAuiditUserId(obj, index);
        setDob(obj, index);
        setDoj(obj, index);
        setEmailId(obj, index);
        setExperienceInfo(obj, index);
        setFatherName(obj, index);
        setFirstName(obj, index);
        setInitial(obj, index);
        setJobTitle(obj, index);
        setLandmark(obj, index);
        setLastName(obj, index);
        setMiddleName(obj, index);
        setMobileNo(obj, index);
        setMotherName(obj, index);
        setPhoneNo(obj, index);
        setPincode(obj, index);
        setQualification(obj, index);
        setSchoolId(obj, index);
        setStaffIdProofImageUrl(obj, index);
        setStaffPhotoUrl(obj, index);
        setTotalYeasExp(obj, index);
        return obj;
    }
    
    public void StaffDataOnDemand.setAddress(Staff obj, int index) {
        String address = "address_" + index;
        if (address.length() > 255) {
            address = address.substring(0, 255);
        }
        obj.setAddress(address);
    }
    
    public void StaffDataOnDemand.setAuiditUserId(Staff obj, int index) {
        Staff auiditUserId = obj;
        obj.setAuiditUserId(auiditUserId);
    }
    
    public void StaffDataOnDemand.setDob(Staff obj, int index) {
        Date dob = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDob(dob);
    }
    
    public void StaffDataOnDemand.setDoj(Staff obj, int index) {
        Date doj = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDoj(doj);
    }
    
    public void StaffDataOnDemand.setEmailId(Staff obj, int index) {
        String emailId = "foo" + index + "@bar.com";
        if (emailId.length() > 200) {
            emailId = emailId.substring(0, 200);
        }
        obj.setEmailId(emailId);
    }
    
    public void StaffDataOnDemand.setExperienceInfo(Staff obj, int index) {
        String experienceInfo = "experienceInfo_" + index;
        if (experienceInfo.length() > 500) {
            experienceInfo = experienceInfo.substring(0, 500);
        }
        obj.setExperienceInfo(experienceInfo);
    }
    
    public void StaffDataOnDemand.setFatherName(Staff obj, int index) {
        String fatherName = "fatherName_" + index;
        if (fatherName.length() > 200) {
            fatherName = fatherName.substring(0, 200);
        }
        obj.setFatherName(fatherName);
    }
    
    public void StaffDataOnDemand.setFirstName(Staff obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 200) {
            firstName = firstName.substring(0, 200);
        }
        obj.setFirstName(firstName);
    }
    
    public void StaffDataOnDemand.setInitial(Staff obj, int index) {
        String initial = "initial_" + index;
        if (initial.length() > 20) {
            initial = initial.substring(0, 20);
        }
        obj.setInitial(initial);
    }
    
    public void StaffDataOnDemand.setJobTitle(Staff obj, int index) {
        String jobTitle = "jobTitle_" + index;
        if (jobTitle.length() > 200) {
            jobTitle = jobTitle.substring(0, 200);
        }
        obj.setJobTitle(jobTitle);
    }
    
    public void StaffDataOnDemand.setLandmark(Staff obj, int index) {
        String landmark = "landmark_" + index;
        if (landmark.length() > 100) {
            landmark = landmark.substring(0, 100);
        }
        obj.setLandmark(landmark);
    }
    
    public void StaffDataOnDemand.setLastName(Staff obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 200) {
            lastName = lastName.substring(0, 200);
        }
        obj.setLastName(lastName);
    }
    
    public void StaffDataOnDemand.setMiddleName(Staff obj, int index) {
        String middleName = "middleName_" + index;
        if (middleName.length() > 200) {
            middleName = middleName.substring(0, 200);
        }
        obj.setMiddleName(middleName);
    }
    
    public void StaffDataOnDemand.setMobileNo(Staff obj, int index) {
        String mobileNo = "mobileNo_" + index;
        if (mobileNo.length() > 100) {
            mobileNo = mobileNo.substring(0, 100);
        }
        obj.setMobileNo(mobileNo);
    }
    
    public void StaffDataOnDemand.setMotherName(Staff obj, int index) {
        String motherName = "motherName_" + index;
        if (motherName.length() > 200) {
            motherName = motherName.substring(0, 200);
        }
        obj.setMotherName(motherName);
    }
    
    public void StaffDataOnDemand.setPhoneNo(Staff obj, int index) {
        String phoneNo = "phoneNo_" + index;
        if (phoneNo.length() > 100) {
            phoneNo = phoneNo.substring(0, 100);
        }
        obj.setPhoneNo(phoneNo);
    }
    
    public void StaffDataOnDemand.setPincode(Staff obj, int index) {
        String pincode = "pincode_" + index;
        if (pincode.length() > 20) {
            pincode = pincode.substring(0, 20);
        }
        obj.setPincode(pincode);
    }
    
    public void StaffDataOnDemand.setQualification(Staff obj, int index) {
        String qualification = "qualification_" + index;
        if (qualification.length() > 200) {
            qualification = qualification.substring(0, 200);
        }
        obj.setQualification(qualification);
    }
    
    public void StaffDataOnDemand.setSchoolId(Staff obj, int index) {
        School schoolId = schoolDataOnDemand.getRandomSchool();
        obj.setSchoolId(schoolId);
    }
    
    public void StaffDataOnDemand.setStaffIdProofImageUrl(Staff obj, int index) {
        String staffIdProofImageUrl = "staffIdProofImageUrl_" + index;
        if (staffIdProofImageUrl.length() > 100) {
            staffIdProofImageUrl = staffIdProofImageUrl.substring(0, 100);
        }
        obj.setStaffIdProofImageUrl(staffIdProofImageUrl);
    }
    
    public void StaffDataOnDemand.setStaffPhotoUrl(Staff obj, int index) {
        String staffPhotoUrl = "staffPhotoUrl_" + index;
        if (staffPhotoUrl.length() > 200) {
            staffPhotoUrl = staffPhotoUrl.substring(0, 200);
        }
        obj.setStaffPhotoUrl(staffPhotoUrl);
    }
    
    public void StaffDataOnDemand.setTotalYeasExp(Staff obj, int index) {
        String totalYeasExp = "totalYeasExp_" + index;
        if (totalYeasExp.length() > 20) {
            totalYeasExp = totalYeasExp.substring(0, 20);
        }
        obj.setTotalYeasExp(totalYeasExp);
    }
    
    public Staff StaffDataOnDemand.getSpecificStaff(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Staff obj = data.get(index);
        Integer id = obj.getStaffId();
        return Staff.findStaff(id);
    }
    
    public Staff StaffDataOnDemand.getRandomStaff() {
        init();
        Staff obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getStaffId();
        return Staff.findStaff(id);
    }
    
    public boolean StaffDataOnDemand.modifyStaff(Staff obj) {
        return false;
    }
    
    public void StaffDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Staff.findStaffEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Staff' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Staff>();
        for (int i = 0; i < 10; i++) {
            Staff obj = getNewTransientStaff(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
