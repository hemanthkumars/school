// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.School;
import com.school.base.domain.SchoolDataOnDemand;
import com.school.base.domain.SchoolGrade;
import com.school.base.domain.SchoolGradeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SchoolGradeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SchoolGradeDataOnDemand: @Component;
    
    private Random SchoolGradeDataOnDemand.rnd = new SecureRandom();
    
    private List<SchoolGrade> SchoolGradeDataOnDemand.data;
    
    @Autowired
    SchoolDataOnDemand SchoolGradeDataOnDemand.schoolDataOnDemand;
    
    public SchoolGrade SchoolGradeDataOnDemand.getNewTransientSchoolGrade(int index) {
        SchoolGrade obj = new SchoolGrade();
        setFromMarks(obj, index);
        setGradeDescription(obj, index);
        setGradeLetter(obj, index);
        setGradePoint(obj, index);
        setSchoolId(obj, index);
        setToMarks(obj, index);
        return obj;
    }
    
    public void SchoolGradeDataOnDemand.setFromMarks(SchoolGrade obj, int index) {
        Integer fromMarks = new Integer(index);
        obj.setFromMarks(fromMarks);
    }
    
    public void SchoolGradeDataOnDemand.setGradeDescription(SchoolGrade obj, int index) {
        String gradeDescription = "gradeDescription_" + index;
        if (gradeDescription.length() > 50) {
            gradeDescription = gradeDescription.substring(0, 50);
        }
        obj.setGradeDescription(gradeDescription);
    }
    
    public void SchoolGradeDataOnDemand.setGradeLetter(SchoolGrade obj, int index) {
        String gradeLetter = "gradeLet_" + index;
        if (gradeLetter.length() > 10) {
            gradeLetter = gradeLetter.substring(0, 10);
        }
        obj.setGradeLetter(gradeLetter);
    }
    
    public void SchoolGradeDataOnDemand.setGradePoint(SchoolGrade obj, int index) {
        Integer gradePoint = new Integer(index);
        obj.setGradePoint(gradePoint);
    }
    
    public void SchoolGradeDataOnDemand.setSchoolId(SchoolGrade obj, int index) {
        School schoolId = schoolDataOnDemand.getRandomSchool();
        obj.setSchoolId(schoolId);
    }
    
    public void SchoolGradeDataOnDemand.setToMarks(SchoolGrade obj, int index) {
        Integer toMarks = new Integer(index);
        obj.setToMarks(toMarks);
    }
    
    public SchoolGrade SchoolGradeDataOnDemand.getSpecificSchoolGrade(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SchoolGrade obj = data.get(index);
        Integer id = obj.getSchoolGradeId();
        return SchoolGrade.findSchoolGrade(id);
    }
    
    public SchoolGrade SchoolGradeDataOnDemand.getRandomSchoolGrade() {
        init();
        SchoolGrade obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getSchoolGradeId();
        return SchoolGrade.findSchoolGrade(id);
    }
    
    public boolean SchoolGradeDataOnDemand.modifySchoolGrade(SchoolGrade obj) {
        return false;
    }
    
    public void SchoolGradeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SchoolGrade.findSchoolGradeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SchoolGrade' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SchoolGrade>();
        for (int i = 0; i < 10; i++) {
            SchoolGrade obj = getNewTransientSchoolGrade(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
