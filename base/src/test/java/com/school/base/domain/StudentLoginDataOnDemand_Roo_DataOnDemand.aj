// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.Student;
import com.school.base.domain.StudentDataOnDemand;
import com.school.base.domain.StudentLogin;
import com.school.base.domain.StudentLoginDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect StudentLoginDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StudentLoginDataOnDemand: @Component;
    
    private Random StudentLoginDataOnDemand.rnd = new SecureRandom();
    
    private List<StudentLogin> StudentLoginDataOnDemand.data;
    
    @Autowired
    StudentDataOnDemand StudentLoginDataOnDemand.studentDataOnDemand;
    
    public StudentLogin StudentLoginDataOnDemand.getNewTransientStudentLogin(int index) {
        StudentLogin obj = new StudentLogin();
        setLoginStatusId(obj, index);
        setNoOfAttemptsRemaining(obj, index);
        setPassword(obj, index);
        setStudentId(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void StudentLoginDataOnDemand.setLoginStatusId(StudentLogin obj, int index) {
        Integer loginStatusId = new Integer(index);
        obj.setLoginStatusId(loginStatusId);
    }
    
    public void StudentLoginDataOnDemand.setNoOfAttemptsRemaining(StudentLogin obj, int index) {
        Integer noOfAttemptsRemaining = new Integer(index);
        obj.setNoOfAttemptsRemaining(noOfAttemptsRemaining);
    }
    
    public void StudentLoginDataOnDemand.setPassword(StudentLogin obj, int index) {
        String password = "password_" + index;
        if (password.length() > 500) {
            password = password.substring(0, 500);
        }
        obj.setPassword(password);
    }
    
    public void StudentLoginDataOnDemand.setStudentId(StudentLogin obj, int index) {
        Student studentId = studentDataOnDemand.getRandomStudent();
        obj.setStudentId(studentId);
    }
    
    public void StudentLoginDataOnDemand.setUsername(StudentLogin obj, int index) {
        String username = "username_" + index;
        if (username.length() > 255) {
            username = username.substring(0, 255);
        }
        obj.setUsername(username);
    }
    
    public StudentLogin StudentLoginDataOnDemand.getSpecificStudentLogin(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        StudentLogin obj = data.get(index);
        Integer id = obj.getStudentLoginId();
        return StudentLogin.findStudentLogin(id);
    }
    
    public StudentLogin StudentLoginDataOnDemand.getRandomStudentLogin() {
        init();
        StudentLogin obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getStudentLoginId();
        return StudentLogin.findStudentLogin(id);
    }
    
    public boolean StudentLoginDataOnDemand.modifyStudentLogin(StudentLogin obj) {
        return false;
    }
    
    public void StudentLoginDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = StudentLogin.findStudentLoginEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'StudentLogin' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<StudentLogin>();
        for (int i = 0; i < 10; i++) {
            StudentLogin obj = getNewTransientStudentLogin(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
