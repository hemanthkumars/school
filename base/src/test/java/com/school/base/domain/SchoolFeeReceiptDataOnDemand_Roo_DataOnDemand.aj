// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.PaymentTypeDataOnDemand;
import com.school.base.domain.School;
import com.school.base.domain.SchoolDataOnDemand;
import com.school.base.domain.SchoolFeeReceipt;
import com.school.base.domain.SchoolFeeReceiptDataOnDemand;
import com.school.base.domain.Staff;
import com.school.base.domain.StaffDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SchoolFeeReceiptDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SchoolFeeReceiptDataOnDemand: @Component;
    
    private Random SchoolFeeReceiptDataOnDemand.rnd = new SecureRandom();
    
    private List<SchoolFeeReceipt> SchoolFeeReceiptDataOnDemand.data;
    
    @Autowired
    StaffDataOnDemand SchoolFeeReceiptDataOnDemand.staffDataOnDemand;
    
    @Autowired
    PaymentTypeDataOnDemand SchoolFeeReceiptDataOnDemand.paymentTypeDataOnDemand;
    
    @Autowired
    SchoolDataOnDemand SchoolFeeReceiptDataOnDemand.schoolDataOnDemand;
    
    public SchoolFeeReceipt SchoolFeeReceiptDataOnDemand.getNewTransientSchoolFeeReceipt(int index) {
        SchoolFeeReceipt obj = new SchoolFeeReceipt();
        setAuditCreatedDtTime(obj, index);
        setAuditUserId(obj, index);
        setReceiptTotalAmount(obj, index);
        setSchoolId(obj, index);
        setSchoolReceiptNo(obj, index);
        return obj;
    }
    
    public void SchoolFeeReceiptDataOnDemand.setAuditCreatedDtTime(SchoolFeeReceipt obj, int index) {
        Calendar auditCreatedDtTime = Calendar.getInstance();
        obj.setAuditCreatedDtTime(auditCreatedDtTime);
    }
    
    public void SchoolFeeReceiptDataOnDemand.setAuditUserId(SchoolFeeReceipt obj, int index) {
        Staff auditUserId = staffDataOnDemand.getRandomStaff();
        obj.setAuditUserId(auditUserId);
    }
    
    public void SchoolFeeReceiptDataOnDemand.setReceiptTotalAmount(SchoolFeeReceipt obj, int index) {
        Integer receiptTotalAmount = new Integer(index);
        obj.setReceiptTotalAmount(receiptTotalAmount);
    }
    
    public void SchoolFeeReceiptDataOnDemand.setSchoolId(SchoolFeeReceipt obj, int index) {
        School schoolId = schoolDataOnDemand.getRandomSchool();
        obj.setSchoolId(schoolId);
    }
    
    public void SchoolFeeReceiptDataOnDemand.setSchoolReceiptNo(SchoolFeeReceipt obj, int index) {
        Integer schoolReceiptNo = new Integer(index);
        obj.setSchoolReceiptNo(schoolReceiptNo);
    }
    
    public SchoolFeeReceipt SchoolFeeReceiptDataOnDemand.getSpecificSchoolFeeReceipt(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SchoolFeeReceipt obj = data.get(index);
        Long id = obj.getSchoolFeeReceiptId();
        return SchoolFeeReceipt.findSchoolFeeReceipt(id);
    }
    
    public SchoolFeeReceipt SchoolFeeReceiptDataOnDemand.getRandomSchoolFeeReceipt() {
        init();
        SchoolFeeReceipt obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getSchoolFeeReceiptId();
        return SchoolFeeReceipt.findSchoolFeeReceipt(id);
    }
    
    public boolean SchoolFeeReceiptDataOnDemand.modifySchoolFeeReceipt(SchoolFeeReceipt obj) {
        return false;
    }
    
    public void SchoolFeeReceiptDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SchoolFeeReceipt.findSchoolFeeReceiptEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SchoolFeeReceipt' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SchoolFeeReceipt>();
        for (int i = 0; i < 10; i++) {
            SchoolFeeReceipt obj = getNewTransientSchoolFeeReceipt(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
