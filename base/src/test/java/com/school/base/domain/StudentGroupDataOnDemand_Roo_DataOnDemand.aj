// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.SchoolGroup;
import com.school.base.domain.SchoolGroupDataOnDemand;
import com.school.base.domain.Student;
import com.school.base.domain.StudentDataOnDemand;
import com.school.base.domain.StudentGroup;
import com.school.base.domain.StudentGroupDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect StudentGroupDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StudentGroupDataOnDemand: @Component;
    
    private Random StudentGroupDataOnDemand.rnd = new SecureRandom();
    
    private List<StudentGroup> StudentGroupDataOnDemand.data;
    
    @Autowired
    SchoolGroupDataOnDemand StudentGroupDataOnDemand.schoolGroupDataOnDemand;
    
    @Autowired
    StudentDataOnDemand StudentGroupDataOnDemand.studentDataOnDemand;
    
    public StudentGroup StudentGroupDataOnDemand.getNewTransientStudentGroup(int index) {
        StudentGroup obj = new StudentGroup();
        setGroupId(obj, index);
        setStudentId(obj, index);
        return obj;
    }
    
    public void StudentGroupDataOnDemand.setGroupId(StudentGroup obj, int index) {
        SchoolGroup groupId = schoolGroupDataOnDemand.getRandomSchoolGroup();
        obj.setGroupId(groupId);
    }
    
    public void StudentGroupDataOnDemand.setStudentId(StudentGroup obj, int index) {
        Student studentId = studentDataOnDemand.getRandomStudent();
        obj.setStudentId(studentId);
    }
    
    public StudentGroup StudentGroupDataOnDemand.getSpecificStudentGroup(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        StudentGroup obj = data.get(index);
        Integer id = obj.getStudentGroupId();
        return StudentGroup.findStudentGroup(id);
    }
    
    public StudentGroup StudentGroupDataOnDemand.getRandomStudentGroup() {
        init();
        StudentGroup obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getStudentGroupId();
        return StudentGroup.findStudentGroup(id);
    }
    
    public boolean StudentGroupDataOnDemand.modifyStudentGroup(StudentGroup obj) {
        return false;
    }
    
    public void StudentGroupDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = StudentGroup.findStudentGroupEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'StudentGroup' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<StudentGroup>();
        for (int i = 0; i < 10; i++) {
            StudentGroup obj = getNewTransientStudentGroup(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
