// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.School;
import com.school.base.domain.SchoolDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect SchoolDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SchoolDataOnDemand: @Component;
    
    private Random SchoolDataOnDemand.rnd = new SecureRandom();
    
    private List<School> SchoolDataOnDemand.data;
    
    public School SchoolDataOnDemand.getNewTransientSchool(int index) {
        School obj = new School();
        setCountryId(obj, index);
        setCurrencyId(obj, index);
        setPerSmsCost(obj, index);
        setPricipalEmail(obj, index);
        setPrincipalMobile(obj, index);
        setPrincipalName(obj, index);
        setSchoolAddress(obj, index);
        setSchoolContact(obj, index);
        setSchoolFoundedDate(obj, index);
        setSchoolLogoUrl(obj, index);
        setSchoolName(obj, index);
        return obj;
    }
    
    public void SchoolDataOnDemand.setCountryId(School obj, int index) {
        Integer countryId = new Integer(index);
        obj.setCountryId(countryId);
    }
    
    public void SchoolDataOnDemand.setCurrencyId(School obj, int index) {
        Integer currencyId = new Integer(index);
        obj.setCurrencyId(currencyId);
    }
    
    public void SchoolDataOnDemand.setPerSmsCost(School obj, int index) {
        Float perSmsCost = new Integer(index).floatValue();
        if (perSmsCost > 9.99999999999E11F) {
            perSmsCost = 9.99999999999E11F;
        }
        obj.setPerSmsCost(perSmsCost);
    }
    
    public void SchoolDataOnDemand.setPricipalEmail(School obj, int index) {
        String pricipalEmail = "foo" + index + "@bar.com";
        if (pricipalEmail.length() > 200) {
            pricipalEmail = pricipalEmail.substring(0, 200);
        }
        obj.setPricipalEmail(pricipalEmail);
    }
    
    public void SchoolDataOnDemand.setPrincipalMobile(School obj, int index) {
        String principalMobile = "principalMobile_" + index;
        if (principalMobile.length() > 100) {
            principalMobile = principalMobile.substring(0, 100);
        }
        obj.setPrincipalMobile(principalMobile);
    }
    
    public void SchoolDataOnDemand.setPrincipalName(School obj, int index) {
        String principalName = "principalName_" + index;
        if (principalName.length() > 100) {
            principalName = principalName.substring(0, 100);
        }
        obj.setPrincipalName(principalName);
    }
    
    public void SchoolDataOnDemand.setSchoolAddress(School obj, int index) {
        String schoolAddress = "schoolAddress_" + index;
        if (schoolAddress.length() > 400) {
            schoolAddress = schoolAddress.substring(0, 400);
        }
        obj.setSchoolAddress(schoolAddress);
    }
    
    public void SchoolDataOnDemand.setSchoolContact(School obj, int index) {
        String schoolContact = "schoolContact_" + index;
        if (schoolContact.length() > 100) {
            schoolContact = schoolContact.substring(0, 100);
        }
        obj.setSchoolContact(schoolContact);
    }
    
    public void SchoolDataOnDemand.setSchoolFoundedDate(School obj, int index) {
        Date schoolFoundedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setSchoolFoundedDate(schoolFoundedDate);
    }
    
    public void SchoolDataOnDemand.setSchoolLogoUrl(School obj, int index) {
        String schoolLogoUrl = "schoolLogoUrl_" + index;
        if (schoolLogoUrl.length() > 300) {
            schoolLogoUrl = schoolLogoUrl.substring(0, 300);
        }
        obj.setSchoolLogoUrl(schoolLogoUrl);
    }
    
    public void SchoolDataOnDemand.setSchoolName(School obj, int index) {
        String schoolName = "schoolName_" + index;
        if (schoolName.length() > 200) {
            schoolName = schoolName.substring(0, 200);
        }
        obj.setSchoolName(schoolName);
    }
    
    public School SchoolDataOnDemand.getSpecificSchool(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        School obj = data.get(index);
        Integer id = obj.getSchoolId();
        return School.findSchool(id);
    }
    
    public School SchoolDataOnDemand.getRandomSchool() {
        init();
        School obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getSchoolId();
        return School.findSchool(id);
    }
    
    public boolean SchoolDataOnDemand.modifySchool(School obj) {
        return false;
    }
    
    public void SchoolDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = School.findSchoolEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'School' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<School>();
        for (int i = 0; i < 10; i++) {
            School obj = getNewTransientSchool(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
