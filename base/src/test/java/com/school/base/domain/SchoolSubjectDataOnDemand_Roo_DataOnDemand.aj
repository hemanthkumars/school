// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.School;
import com.school.base.domain.SchoolDataOnDemand;
import com.school.base.domain.SchoolSubject;
import com.school.base.domain.SchoolSubjectDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SchoolSubjectDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SchoolSubjectDataOnDemand: @Component;
    
    private Random SchoolSubjectDataOnDemand.rnd = new SecureRandom();
    
    private List<SchoolSubject> SchoolSubjectDataOnDemand.data;
    
    @Autowired
    SchoolDataOnDemand SchoolSubjectDataOnDemand.schoolDataOnDemand;
    
    public SchoolSubject SchoolSubjectDataOnDemand.getNewTransientSchoolSubject(int index) {
        SchoolSubject obj = new SchoolSubject();
        setCredits(obj, index);
        setPlaceholder(obj, index);
        setSchoolId(obj, index);
        setSubjectCode(obj, index);
        setSubjectName(obj, index);
        return obj;
    }
    
    public void SchoolSubjectDataOnDemand.setCredits(SchoolSubject obj, int index) {
        String credits = "credits_" + index;
        if (credits.length() > 100) {
            credits = credits.substring(0, 100);
        }
        obj.setCredits(credits);
    }
    
    public void SchoolSubjectDataOnDemand.setPlaceholder(SchoolSubject obj, int index) {
        String placeholder = "placeholder_" + index;
        if (placeholder.length() > 100) {
            placeholder = placeholder.substring(0, 100);
        }
        obj.setPlaceholder(placeholder);
    }
    
    public void SchoolSubjectDataOnDemand.setSchoolId(SchoolSubject obj, int index) {
        School schoolId = schoolDataOnDemand.getRandomSchool();
        obj.setSchoolId(schoolId);
    }
    
    public void SchoolSubjectDataOnDemand.setSubjectCode(SchoolSubject obj, int index) {
        String subjectCode = "subjectCode_" + index;
        if (subjectCode.length() > 20) {
            subjectCode = subjectCode.substring(0, 20);
        }
        obj.setSubjectCode(subjectCode);
    }
    
    public void SchoolSubjectDataOnDemand.setSubjectName(SchoolSubject obj, int index) {
        String subjectName = "subjectName_" + index;
        if (subjectName.length() > 100) {
            subjectName = subjectName.substring(0, 100);
        }
        obj.setSubjectName(subjectName);
    }
    
    public SchoolSubject SchoolSubjectDataOnDemand.getSpecificSchoolSubject(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SchoolSubject obj = data.get(index);
        Integer id = obj.getSchoolSubjectId();
        return SchoolSubject.findSchoolSubject(id);
    }
    
    public SchoolSubject SchoolSubjectDataOnDemand.getRandomSchoolSubject() {
        init();
        SchoolSubject obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getSchoolSubjectId();
        return SchoolSubject.findSchoolSubject(id);
    }
    
    public boolean SchoolSubjectDataOnDemand.modifySchoolSubject(SchoolSubject obj) {
        return false;
    }
    
    public void SchoolSubjectDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SchoolSubject.findSchoolSubjectEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SchoolSubject' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SchoolSubject>();
        for (int i = 0; i < 10; i++) {
            SchoolSubject obj = getNewTransientSchoolSubject(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
