// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.SchoolAcademic;
import com.school.base.domain.SchoolAcademicDataOnDemand;
import com.school.base.domain.SchoolAcademicIntegrationTest;
import java.util.Iterator;
import java.util.List;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SchoolAcademicIntegrationTest_Roo_IntegrationTest {
    
    declare @type: SchoolAcademicIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: SchoolAcademicIntegrationTest: @ContextConfiguration(locations = "classpath*:/META-INF/spring/applicationContext*.xml");
    
    declare @type: SchoolAcademicIntegrationTest: @Transactional;
    
    @Autowired
    SchoolAcademicDataOnDemand SchoolAcademicIntegrationTest.dod;
    
    @Test
    public void SchoolAcademicIntegrationTest.testCountSchoolAcademics() {
        Assert.assertNotNull("Data on demand for 'SchoolAcademic' failed to initialize correctly", dod.getRandomSchoolAcademic());
        long count = SchoolAcademic.countSchoolAcademics();
        Assert.assertTrue("Counter for 'SchoolAcademic' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void SchoolAcademicIntegrationTest.testFindSchoolAcademic() {
        SchoolAcademic obj = dod.getRandomSchoolAcademic();
        Assert.assertNotNull("Data on demand for 'SchoolAcademic' failed to initialize correctly", obj);
        Integer id = obj.getSchoolAcademicYearId();
        Assert.assertNotNull("Data on demand for 'SchoolAcademic' failed to provide an identifier", id);
        obj = SchoolAcademic.findSchoolAcademic(id);
        Assert.assertNotNull("Find method for 'SchoolAcademic' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'SchoolAcademic' returned the incorrect identifier", id, obj.getSchoolAcademicYearId());
    }
    
    @Test
    public void SchoolAcademicIntegrationTest.testFindAllSchoolAcademics() {
        Assert.assertNotNull("Data on demand for 'SchoolAcademic' failed to initialize correctly", dod.getRandomSchoolAcademic());
        long count = SchoolAcademic.countSchoolAcademics();
        Assert.assertTrue("Too expensive to perform a find all test for 'SchoolAcademic', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<SchoolAcademic> result = SchoolAcademic.findAllSchoolAcademics();
        Assert.assertNotNull("Find all method for 'SchoolAcademic' illegally returned null", result);
        Assert.assertTrue("Find all method for 'SchoolAcademic' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void SchoolAcademicIntegrationTest.testFindSchoolAcademicEntries() {
        Assert.assertNotNull("Data on demand for 'SchoolAcademic' failed to initialize correctly", dod.getRandomSchoolAcademic());
        long count = SchoolAcademic.countSchoolAcademics();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<SchoolAcademic> result = SchoolAcademic.findSchoolAcademicEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'SchoolAcademic' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'SchoolAcademic' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void SchoolAcademicIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'SchoolAcademic' failed to initialize correctly", dod.getRandomSchoolAcademic());
        SchoolAcademic obj = dod.getNewTransientSchoolAcademic(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'SchoolAcademic' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'SchoolAcademic' identifier to be null", obj.getSchoolAcademicYearId());
        try {
            obj.persist();
        } catch (final ConstraintViolationException e) {
            final StringBuilder msg = new StringBuilder();
            for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                final ConstraintViolation<?> cv = iter.next();
                msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
            }
            throw new IllegalStateException(msg.toString(), e);
        }
        obj.flush();
        Assert.assertNotNull("Expected 'SchoolAcademic' identifier to no longer be null", obj.getSchoolAcademicYearId());
    }
    
    @Test
    public void SchoolAcademicIntegrationTest.testRemove() {
        SchoolAcademic obj = dod.getRandomSchoolAcademic();
        Assert.assertNotNull("Data on demand for 'SchoolAcademic' failed to initialize correctly", obj);
        Integer id = obj.getSchoolAcademicYearId();
        Assert.assertNotNull("Data on demand for 'SchoolAcademic' failed to provide an identifier", id);
        obj = SchoolAcademic.findSchoolAcademic(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'SchoolAcademic' with identifier '" + id + "'", SchoolAcademic.findSchoolAcademic(id));
    }
    
}
