// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.Examination;
import com.school.base.domain.ExaminationDataOnDemand;
import com.school.base.domain.ResultType;
import com.school.base.domain.ResultTypeDataOnDemand;
import com.school.base.domain.School;
import com.school.base.domain.SchoolDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ExaminationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ExaminationDataOnDemand: @Component;
    
    private Random ExaminationDataOnDemand.rnd = new SecureRandom();
    
    private List<Examination> ExaminationDataOnDemand.data;
    
    @Autowired
    ResultTypeDataOnDemand ExaminationDataOnDemand.resultTypeDataOnDemand;
    
    @Autowired
    SchoolDataOnDemand ExaminationDataOnDemand.schoolDataOnDemand;
    
    public Examination ExaminationDataOnDemand.getNewTransientExamination(int index) {
        Examination obj = new Examination();
        setDescription(obj, index);
        setExamCode(obj, index);
        setResultTypeId(obj, index);
        setSchoolId(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void ExaminationDataOnDemand.setDescription(Examination obj, int index) {
        String description = "description_" + index;
        if (description.length() > 255) {
            description = description.substring(0, 255);
        }
        obj.setDescription(description);
    }
    
    public void ExaminationDataOnDemand.setExamCode(Examination obj, int index) {
        String examCode = "examCode_" + index;
        if (examCode.length() > 255) {
            examCode = examCode.substring(0, 255);
        }
        obj.setExamCode(examCode);
    }
    
    public void ExaminationDataOnDemand.setResultTypeId(Examination obj, int index) {
        ResultType resultTypeId = resultTypeDataOnDemand.getRandomResultType();
        obj.setResultTypeId(resultTypeId);
    }
    
    public void ExaminationDataOnDemand.setSchoolId(Examination obj, int index) {
        School schoolId = schoolDataOnDemand.getRandomSchool();
        obj.setSchoolId(schoolId);
    }
    
    public void ExaminationDataOnDemand.setTitle(Examination obj, int index) {
        String title = "title_" + index;
        if (title.length() > 255) {
            title = title.substring(0, 255);
        }
        obj.setTitle(title);
    }
    
    public Examination ExaminationDataOnDemand.getSpecificExamination(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Examination obj = data.get(index);
        Integer id = obj.getExaminationId();
        return Examination.findExamination(id);
    }
    
    public Examination ExaminationDataOnDemand.getRandomExamination() {
        init();
        Examination obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getExaminationId();
        return Examination.findExamination(id);
    }
    
    public boolean ExaminationDataOnDemand.modifyExamination(Examination obj) {
        return false;
    }
    
    public void ExaminationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Examination.findExaminationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Examination' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Examination>();
        for (int i = 0; i < 10; i++) {
            Examination obj = getNewTransientExamination(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
