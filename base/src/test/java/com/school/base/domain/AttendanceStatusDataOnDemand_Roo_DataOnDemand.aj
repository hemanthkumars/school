// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.AttendanceStatus;
import com.school.base.domain.AttendanceStatusDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect AttendanceStatusDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AttendanceStatusDataOnDemand: @Component;
    
    private Random AttendanceStatusDataOnDemand.rnd = new SecureRandom();
    
    private List<AttendanceStatus> AttendanceStatusDataOnDemand.data;
    
    public AttendanceStatus AttendanceStatusDataOnDemand.getNewTransientAttendanceStatus(int index) {
        AttendanceStatus obj = new AttendanceStatus();
        setCode(obj, index);
        setStatus(obj, index);
        return obj;
    }
    
    public void AttendanceStatusDataOnDemand.setCode(AttendanceStatus obj, int index) {
        String code = "code_" + index;
        if (code.length() > 10) {
            code = code.substring(0, 10);
        }
        obj.setCode(code);
    }
    
    public void AttendanceStatusDataOnDemand.setStatus(AttendanceStatus obj, int index) {
        String status = "status_" + index;
        if (status.length() > 255) {
            status = status.substring(0, 255);
        }
        obj.setStatus(status);
    }
    
    public AttendanceStatus AttendanceStatusDataOnDemand.getSpecificAttendanceStatus(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AttendanceStatus obj = data.get(index);
        Integer id = obj.getAttendanceStatusId();
        return AttendanceStatus.findAttendanceStatus(id);
    }
    
    public AttendanceStatus AttendanceStatusDataOnDemand.getRandomAttendanceStatus() {
        init();
        AttendanceStatus obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getAttendanceStatusId();
        return AttendanceStatus.findAttendanceStatus(id);
    }
    
    public boolean AttendanceStatusDataOnDemand.modifyAttendanceStatus(AttendanceStatus obj) {
        return false;
    }
    
    public void AttendanceStatusDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = AttendanceStatus.findAttendanceStatusEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AttendanceStatus' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AttendanceStatus>();
        for (int i = 0; i < 10; i++) {
            AttendanceStatus obj = getNewTransientAttendanceStatus(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
