// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.Department;
import com.school.base.domain.DepartmentDataOnDemand;
import com.school.base.domain.School;
import com.school.base.domain.SchoolDataOnDemand;
import com.school.base.domain.SchoolDeparment;
import com.school.base.domain.SchoolDeparmentDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SchoolDeparmentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SchoolDeparmentDataOnDemand: @Component;
    
    private Random SchoolDeparmentDataOnDemand.rnd = new SecureRandom();
    
    private List<SchoolDeparment> SchoolDeparmentDataOnDemand.data;
    
    @Autowired
    DepartmentDataOnDemand SchoolDeparmentDataOnDemand.departmentDataOnDemand;
    
    @Autowired
    SchoolDataOnDemand SchoolDeparmentDataOnDemand.schoolDataOnDemand;
    
    public SchoolDeparment SchoolDeparmentDataOnDemand.getNewTransientSchoolDeparment(int index) {
        SchoolDeparment obj = new SchoolDeparment();
        setDepartmentCode(obj, index);
        setDepartmentId(obj, index);
        setSchoolId(obj, index);
        return obj;
    }
    
    public void SchoolDeparmentDataOnDemand.setDepartmentCode(SchoolDeparment obj, int index) {
        String departmentCode = "departmentCode_" + index;
        if (departmentCode.length() > 150) {
            departmentCode = departmentCode.substring(0, 150);
        }
        obj.setDepartmentCode(departmentCode);
    }
    
    public void SchoolDeparmentDataOnDemand.setDepartmentId(SchoolDeparment obj, int index) {
        Department departmentId = departmentDataOnDemand.getRandomDepartment();
        obj.setDepartmentId(departmentId);
    }
    
    public void SchoolDeparmentDataOnDemand.setSchoolId(SchoolDeparment obj, int index) {
        School schoolId = schoolDataOnDemand.getRandomSchool();
        obj.setSchoolId(schoolId);
    }
    
    public SchoolDeparment SchoolDeparmentDataOnDemand.getSpecificSchoolDeparment(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SchoolDeparment obj = data.get(index);
        Integer id = obj.getSchoolDeparmentId();
        return SchoolDeparment.findSchoolDeparment(id);
    }
    
    public SchoolDeparment SchoolDeparmentDataOnDemand.getRandomSchoolDeparment() {
        init();
        SchoolDeparment obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getSchoolDeparmentId();
        return SchoolDeparment.findSchoolDeparment(id);
    }
    
    public boolean SchoolDeparmentDataOnDemand.modifySchoolDeparment(SchoolDeparment obj) {
        return false;
    }
    
    public void SchoolDeparmentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SchoolDeparment.findSchoolDeparmentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SchoolDeparment' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SchoolDeparment>();
        for (int i = 0; i < 10; i++) {
            SchoolDeparment obj = getNewTransientSchoolDeparment(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
