// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.BloodGroupDataOnDemand;
import com.school.base.domain.CasteDataOnDemand;
import com.school.base.domain.CityDataOnDemand;
import com.school.base.domain.CountryDataOnDemand;
import com.school.base.domain.Gender;
import com.school.base.domain.GenderDataOnDemand;
import com.school.base.domain.LanguageDataOnDemand;
import com.school.base.domain.ReligionDataOnDemand;
import com.school.base.domain.School;
import com.school.base.domain.SchoolAcademicDataOnDemand;
import com.school.base.domain.SchoolClassSectionDataOnDemand;
import com.school.base.domain.SchoolDataOnDemand;
import com.school.base.domain.SchoolGroupDataOnDemand;
import com.school.base.domain.StaffDataOnDemand;
import com.school.base.domain.StateDataOnDemand;
import com.school.base.domain.Student;
import com.school.base.domain.StudentDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect StudentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StudentDataOnDemand: @Component;
    
    private Random StudentDataOnDemand.rnd = new SecureRandom();
    
    private List<Student> StudentDataOnDemand.data;
    
    @Autowired
    StaffDataOnDemand StudentDataOnDemand.staffDataOnDemand;
    
    @Autowired
    BloodGroupDataOnDemand StudentDataOnDemand.bloodGroupDataOnDemand;
    
    @Autowired
    CasteDataOnDemand StudentDataOnDemand.casteDataOnDemand;
    
    @Autowired
    CityDataOnDemand StudentDataOnDemand.cityDataOnDemand;
    
    @Autowired
    CountryDataOnDemand StudentDataOnDemand.countryDataOnDemand;
    
    @Autowired
    GenderDataOnDemand StudentDataOnDemand.genderDataOnDemand;
    
    @Autowired
    LanguageDataOnDemand StudentDataOnDemand.languageDataOnDemand;
    
    @Autowired
    ReligionDataOnDemand StudentDataOnDemand.religionDataOnDemand;
    
    @Autowired
    SchoolAcademicDataOnDemand StudentDataOnDemand.schoolAcademicDataOnDemand;
    
    @Autowired
    SchoolClassSectionDataOnDemand StudentDataOnDemand.schoolClassSectionDataOnDemand;
    
    @Autowired
    SchoolGroupDataOnDemand StudentDataOnDemand.schoolGroupDataOnDemand;
    
    @Autowired
    SchoolDataOnDemand StudentDataOnDemand.schoolDataOnDemand;
    
    @Autowired
    StateDataOnDemand StudentDataOnDemand.stateDataOnDemand;
    
    public Student StudentDataOnDemand.getNewTransientStudent(int index) {
        Student obj = new Student();
        setAddress(obj, index);
        setAdmissionDate(obj, index);
        setAdmissionNo(obj, index);
        setAuditCreatedDtTime(obj, index);
        setAuditModifiedDtTime(obj, index);
        setDistrictId(obj, index);
        setDob(obj, index);
        setFatherEmail(obj, index);
        setFatherMobile(obj, index);
        setFatherName(obj, index);
        setFatherOccupation(obj, index);
        setFirstName(obj, index);
        setGenderId(obj, index);
        setIdentificationMark(obj, index);
        setInitial(obj, index);
        setLandmark(obj, index);
        setLastName(obj, index);
        setMiddleName(obj, index);
        setMotherEmail(obj, index);
        setMotherMobile(obj, index);
        setMotherName(obj, index);
        setMotherOccupation(obj, index);
        setPassword(obj, index);
        setPincode(obj, index);
        setSchoolId(obj, index);
        setStudentPhotoUrl(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void StudentDataOnDemand.setAddress(Student obj, int index) {
        String address = "address_" + index;
        if (address.length() > 500) {
            address = address.substring(0, 500);
        }
        obj.setAddress(address);
    }
    
    public void StudentDataOnDemand.setAdmissionDate(Student obj, int index) {
        Date admissionDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setAdmissionDate(admissionDate);
    }
    
    public void StudentDataOnDemand.setAdmissionNo(Student obj, int index) {
        String admissionNo = "admissionNo_" + index;
        if (admissionNo.length() > 255) {
            admissionNo = admissionNo.substring(0, 255);
        }
        obj.setAdmissionNo(admissionNo);
    }
    
    public void StudentDataOnDemand.setAuditCreatedDtTime(Student obj, int index) {
        Calendar auditCreatedDtTime = Calendar.getInstance();
        obj.setAuditCreatedDtTime(auditCreatedDtTime);
    }
    
    public void StudentDataOnDemand.setAuditModifiedDtTime(Student obj, int index) {
        Calendar auditModifiedDtTime = Calendar.getInstance();
        obj.setAuditModifiedDtTime(auditModifiedDtTime);
    }
    
    public void StudentDataOnDemand.setDistrictId(Student obj, int index) {
        Integer districtId = new Integer(index);
        obj.setDistrictId(districtId);
    }
    
    public void StudentDataOnDemand.setDob(Student obj, int index) {
        Date dob = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDob(dob);
    }
    
    public void StudentDataOnDemand.setFatherEmail(Student obj, int index) {
        String fatherEmail = "foo" + index + "@bar.com";
        if (fatherEmail.length() > 300) {
            fatherEmail = fatherEmail.substring(0, 300);
        }
        obj.setFatherEmail(fatherEmail);
    }
    
    public void StudentDataOnDemand.setFatherMobile(Student obj, int index) {
        String fatherMobile = "fatherMobile_" + index;
        if (fatherMobile.length() > 20) {
            fatherMobile = fatherMobile.substring(0, 20);
        }
        obj.setFatherMobile(fatherMobile);
    }
    
    public void StudentDataOnDemand.setFatherName(Student obj, int index) {
        String fatherName = "fatherName_" + index;
        if (fatherName.length() > 255) {
            fatherName = fatherName.substring(0, 255);
        }
        obj.setFatherName(fatherName);
    }
    
    public void StudentDataOnDemand.setFatherOccupation(Student obj, int index) {
        String fatherOccupation = "fatherOccupation_" + index;
        if (fatherOccupation.length() > 255) {
            fatherOccupation = fatherOccupation.substring(0, 255);
        }
        obj.setFatherOccupation(fatherOccupation);
    }
    
    public void StudentDataOnDemand.setFirstName(Student obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 200) {
            firstName = firstName.substring(0, 200);
        }
        obj.setFirstName(firstName);
    }
    
    public void StudentDataOnDemand.setGenderId(Student obj, int index) {
        Gender genderId = genderDataOnDemand.getRandomGender();
        obj.setGenderId(genderId);
    }
    
    public void StudentDataOnDemand.setIdentificationMark(Student obj, int index) {
        String identificationMark = "identificationMark_" + index;
        if (identificationMark.length() > 255) {
            identificationMark = identificationMark.substring(0, 255);
        }
        obj.setIdentificationMark(identificationMark);
    }
    
    public void StudentDataOnDemand.setInitial(Student obj, int index) {
        String initial = "initial_" + index;
        if (initial.length() > 50) {
            initial = initial.substring(0, 50);
        }
        obj.setInitial(initial);
    }
    
    public void StudentDataOnDemand.setLandmark(Student obj, int index) {
        String landmark = "landmark_" + index;
        if (landmark.length() > 200) {
            landmark = landmark.substring(0, 200);
        }
        obj.setLandmark(landmark);
    }
    
    public void StudentDataOnDemand.setLastName(Student obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 200) {
            lastName = lastName.substring(0, 200);
        }
        obj.setLastName(lastName);
    }
    
    public void StudentDataOnDemand.setMiddleName(Student obj, int index) {
        String middleName = "middleName_" + index;
        if (middleName.length() > 200) {
            middleName = middleName.substring(0, 200);
        }
        obj.setMiddleName(middleName);
    }
    
    public void StudentDataOnDemand.setMotherEmail(Student obj, int index) {
        String motherEmail = "foo" + index + "@bar.com";
        if (motherEmail.length() > 300) {
            motherEmail = motherEmail.substring(0, 300);
        }
        obj.setMotherEmail(motherEmail);
    }
    
    public void StudentDataOnDemand.setMotherMobile(Student obj, int index) {
        String motherMobile = "motherMobile_" + index;
        if (motherMobile.length() > 20) {
            motherMobile = motherMobile.substring(0, 20);
        }
        obj.setMotherMobile(motherMobile);
    }
    
    public void StudentDataOnDemand.setMotherName(Student obj, int index) {
        String motherName = "motherName_" + index;
        if (motherName.length() > 255) {
            motherName = motherName.substring(0, 255);
        }
        obj.setMotherName(motherName);
    }
    
    public void StudentDataOnDemand.setMotherOccupation(Student obj, int index) {
        String motherOccupation = "motherOccupation_" + index;
        if (motherOccupation.length() > 255) {
            motherOccupation = motherOccupation.substring(0, 255);
        }
        obj.setMotherOccupation(motherOccupation);
    }
    
    public void StudentDataOnDemand.setPassword(Student obj, int index) {
        String password = "password_" + index;
        if (password.length() > 500) {
            password = password.substring(0, 500);
        }
        obj.setPassword(password);
    }
    
    public void StudentDataOnDemand.setPincode(Student obj, int index) {
        String pincode = "pincode_" + index;
        if (pincode.length() > 100) {
            pincode = pincode.substring(0, 100);
        }
        obj.setPincode(pincode);
    }
    
    public void StudentDataOnDemand.setSchoolId(Student obj, int index) {
        School schoolId = schoolDataOnDemand.getRandomSchool();
        obj.setSchoolId(schoolId);
    }
    
    public void StudentDataOnDemand.setStudentPhotoUrl(Student obj, int index) {
        String studentPhotoUrl = "studentPhotoUrl_" + index;
        if (studentPhotoUrl.length() > 255) {
            studentPhotoUrl = studentPhotoUrl.substring(0, 255);
        }
        obj.setStudentPhotoUrl(studentPhotoUrl);
    }
    
    public void StudentDataOnDemand.setUsername(Student obj, int index) {
        String username = "username_" + index;
        if (username.length() > 300) {
            username = username.substring(0, 300);
        }
        obj.setUsername(username);
    }
    
    public Student StudentDataOnDemand.getSpecificStudent(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Student obj = data.get(index);
        Integer id = obj.getStudentId();
        return Student.findStudent(id);
    }
    
    public Student StudentDataOnDemand.getRandomStudent() {
        init();
        Student obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getStudentId();
        return Student.findStudent(id);
    }
    
    public boolean StudentDataOnDemand.modifyStudent(Student obj) {
        return false;
    }
    
    public void StudentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Student.findStudentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Student' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Student>();
        for (int i = 0; i < 10; i++) {
            Student obj = getNewTransientStudent(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
