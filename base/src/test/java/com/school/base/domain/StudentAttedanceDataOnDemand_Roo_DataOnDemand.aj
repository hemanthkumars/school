// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.base.domain;

import com.school.base.domain.AttendanceStatus;
import com.school.base.domain.AttendanceStatusDataOnDemand;
import com.school.base.domain.SchoolAcademicDataOnDemand;
import com.school.base.domain.SchoolSession;
import com.school.base.domain.SchoolSessionDataOnDemand;
import com.school.base.domain.SchoolSubjectDataOnDemand;
import com.school.base.domain.Staff;
import com.school.base.domain.StaffDataOnDemand;
import com.school.base.domain.Student;
import com.school.base.domain.StudentAttedance;
import com.school.base.domain.StudentAttedanceDataOnDemand;
import com.school.base.domain.StudentDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect StudentAttedanceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StudentAttedanceDataOnDemand: @Component;
    
    private Random StudentAttedanceDataOnDemand.rnd = new SecureRandom();
    
    private List<StudentAttedance> StudentAttedanceDataOnDemand.data;
    
    @Autowired
    AttendanceStatusDataOnDemand StudentAttedanceDataOnDemand.attendanceStatusDataOnDemand;
    
    @Autowired
    StaffDataOnDemand StudentAttedanceDataOnDemand.staffDataOnDemand;
    
    @Autowired
    SchoolAcademicDataOnDemand StudentAttedanceDataOnDemand.schoolAcademicDataOnDemand;
    
    @Autowired
    SchoolSessionDataOnDemand StudentAttedanceDataOnDemand.schoolSessionDataOnDemand;
    
    @Autowired
    StudentDataOnDemand StudentAttedanceDataOnDemand.studentDataOnDemand;
    
    @Autowired
    SchoolSubjectDataOnDemand StudentAttedanceDataOnDemand.schoolSubjectDataOnDemand;
    
    public StudentAttedance StudentAttedanceDataOnDemand.getNewTransientStudentAttedance(int index) {
        StudentAttedance obj = new StudentAttedance();
        setAttendanceDate(obj, index);
        setAttendanceStatusId(obj, index);
        setAuditCreatedDtTime(obj, index);
        setAuditModifiedDtTime(obj, index);
        setAuditUserId(obj, index);
        setSchoolSessionId(obj, index);
        setStudentId(obj, index);
        return obj;
    }
    
    public void StudentAttedanceDataOnDemand.setAttendanceDate(StudentAttedance obj, int index) {
        Date attendanceDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setAttendanceDate(attendanceDate);
    }
    
    public void StudentAttedanceDataOnDemand.setAttendanceStatusId(StudentAttedance obj, int index) {
        AttendanceStatus attendanceStatusId = attendanceStatusDataOnDemand.getRandomAttendanceStatus();
        obj.setAttendanceStatusId(attendanceStatusId);
    }
    
    public void StudentAttedanceDataOnDemand.setAuditCreatedDtTime(StudentAttedance obj, int index) {
        Calendar auditCreatedDtTime = Calendar.getInstance();
        obj.setAuditCreatedDtTime(auditCreatedDtTime);
    }
    
    public void StudentAttedanceDataOnDemand.setAuditModifiedDtTime(StudentAttedance obj, int index) {
        Calendar auditModifiedDtTime = Calendar.getInstance();
        obj.setAuditModifiedDtTime(auditModifiedDtTime);
    }
    
    public void StudentAttedanceDataOnDemand.setAuditUserId(StudentAttedance obj, int index) {
        Staff auditUserId = staffDataOnDemand.getRandomStaff();
        obj.setAuditUserId(auditUserId);
    }
    
    public void StudentAttedanceDataOnDemand.setSchoolSessionId(StudentAttedance obj, int index) {
        SchoolSession schoolSessionId = schoolSessionDataOnDemand.getRandomSchoolSession();
        obj.setSchoolSessionId(schoolSessionId);
    }
    
    public void StudentAttedanceDataOnDemand.setStudentId(StudentAttedance obj, int index) {
        Student studentId = studentDataOnDemand.getRandomStudent();
        obj.setStudentId(studentId);
    }
    
    public StudentAttedance StudentAttedanceDataOnDemand.getSpecificStudentAttedance(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        StudentAttedance obj = data.get(index);
        Long id = obj.getStudentAttendanceId();
        return StudentAttedance.findStudentAttedance(id);
    }
    
    public StudentAttedance StudentAttedanceDataOnDemand.getRandomStudentAttedance() {
        init();
        StudentAttedance obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getStudentAttendanceId();
        return StudentAttedance.findStudentAttedance(id);
    }
    
    public boolean StudentAttedanceDataOnDemand.modifyStudentAttedance(StudentAttedance obj) {
        return false;
    }
    
    public void StudentAttedanceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = StudentAttedance.findStudentAttedanceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'StudentAttedance' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<StudentAttedance>();
        for (int i = 0; i < 10; i++) {
            StudentAttedance obj = getNewTransientStudentAttedance(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
